== 02. 리액티브 익스텐션

.rx.subjects.Subject

* `Subject` 클래스는 `Observable` 을 확장하면서 동시에 `Observer` 를 구현해놓음

****
주제(subject)는 옵저버나 Observable처럼 행동하는 ReactiveX의 일부 구현체에서
사용 가능한 일종의 교각 혹은 프록시라고 볼 수 있는데, 그 이유는 주제는 옵저버이기
때문에 하나 이상의 Observable을 구독할 수 있으며 동시에 Observable이기도 하기 때문에
항목들을 하나 하나 거치면서 재배출하고 관찰하며 새로운 항목들을 배출할 수도 있다.

하나의 주제는 하나의 Observable을 구독하면서, (Observable이 "차가운" Observable인 경우
즉, 옵저버가 구독을 시작하기 전까지 항목들의 배출을 지연시키는 Observable일 경우)
Observable이 항목들을 배출시키도록 동작시킨다. 그 결과로 인해 원래는 "차가운" Observable이었던
주제를 "뜨거운" Observable로 만들기도 한다.

****

reactiveX에서는 Subject와 관련해 4가지 유형을 정의

* AsyncSubject
** 모든 데이터가 방출된 이후 마지막 데이터를 observer로 전달함
** image:http://reactivex.io/documentation/operators/images/S.AsyncSubject.png[]

* BehaviorSubject
** 구독시 마지막 데이터 반환. 이후 데이터 입력시마다 observer에게 전달
** image:http://reactivex.io/documentation/operators/images/S.BehaviorSubject.png[]

* PublishSubject
** BehaviorSubject와 유사. 구독시 마지막데이터는 전달하지 않음 이후 데이터 전달함
** image:http://reactivex.io/documentation/operators/images/S.PublishSubject.png[]

* ReplySubject
** 구독시 이전데이터까지 전부 전달함
** 메모리 누수가 일어날 수 있으므로 조심해서 사용할 것
** image:http://reactivex.io/documentation/operators/images/S.ReplaySubject.png[]


.connectableObservable

* observable의 publish를 이용해 connectableObservable를 만들수 있음
* 중간에 브릿지가 존재하고 여기서 업스트림의 플로우를 관리하게 됨

image:https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/publishConnect.png[]

subject와 connectableObserver를 이해하지 못하고 있는 중.. +
좀 더 자료를 찾아보자 ㅠㅠ






